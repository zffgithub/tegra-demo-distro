import subprocess
import os
import xmltodict

github_repos = [
    'https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common',
    'https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_nitros',
    'https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_argus_camera',
    'https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_image_pipeline.git',
    'https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_visual_slam.git',
]

def cmd_process(cmd, timeout=600, poll_code=0):
    print('当前执行命令:', cmd)
    s = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8",
                            bufsize=1, universal_newlines=True)        
    s.wait(timeout)
    if s.poll() == poll_code:
        c = s.communicate()
        return c
    else:
        return False

rootpath = '/Users/yikunzhu/wwwroot/zff-tegra-demo-distro-kirkstone/tmpdir'

# https://docs.github.com/en/rest
# https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#create-an-organization-repository
def create_github_empty_repo(repo_name):
    pass

def create_github_repos():
    for github_repo in github_repos:
        repo_name = github_repo.split('/')[-1].replace('.git', '')
        print(repo_name)
        for child_repo in os.listdir(f"{rootpath}/{repo_name}"):
            pass

def format_xml_item(key, d):
    item_list = d.get(key, [])
    item_str = f'wrong item: {item_list}'
    if key in ['buildtool_depend', 'buildtool_export_depend']:
        item_str = '\\'.join([f'{item}-native'.replace('_', '-') for item in item_list])
    elif key in ['build_depend', 'depend', 'export_depend', 'test_depend']:
        item_str = '\\'.join([item.replace('_', '-') for item in item_list])
    return item_str

def generate_ros_recipe(source_path, target_path):
    with open(source_path) as xml_file:
        package_dict = xmltodict.parse(xml_file.read())
    data_dict = package_dict.get('package', {})
    buildtool_depend = format_xml_item('buildtool_depend', data_dict)
    buildtool_export_depend = format_xml_item('buildtool_export_depend', data_dict)
    build_depend = format_xml_item('build_depend', data_dict)
    depend = format_xml_item('depend', data_dict)
    # export_depend = '\\'.join(data_dict.get('export_depend', []))
    test_depend = format_xml_item('test_depend', data_dict)
    template = f"""
# Generated by superflore -- DO NOT EDIT
#
# Copyright Open Source Robotics Foundation

inherit ros_distro_humble
inherit ros_superflore_generated

DESCRIPTION = "{data_dict.get('description', 'NO DESCRIPTION')}"
AUTHOR = "{data_dict.get('maintainer', {}).get('#text', '')} <{data_dict.get('maintainer', {}).get('@email', '')}>"
ROS_AUTHOR = "{','.join(data_dict.get('author', []))}"
HOMEPAGE = "{data_dict.get('url', {}).get('#text', '')}"
SECTION = "devel"
# Original license in package.xml, joined with "&" when multiple license tags were used:
#         "Apache License 2.0"
LICENSE = "{data_dict.get('license', 'no license')}"
LIC_FILES_CHKSUM = "file://package.xml;beginline=11;endline=11;md5=12c26a18c7f493fdc7e8a93b16b7c04f"

ROS_CN = "{data_dict.get('name', 'no name')}"
ROS_BPN = "{data_dict.get('name', 'no name')}"

ROS_BUILD_DEPENDS = " \\
    {build_depend}
"

ROS_BUILDTOOL_DEPENDS = " \\
    {buildtool_depend}
"

ROS_EXPORT_DEPENDS = " \\
    {depend}
"

ROS_BUILDTOOL_EXPORT_DEPENDS = " \\
    {buildtool_export_depend}
"

ROS_EXEC_DEPENDS = " \\
    {depend}
"

# Currently informational only -- see http://www.ros.org/reps/rep-0149.html#dependency-tags.
ROS_TEST_DEPENDS = " \\
    {test_depend}
"

DEPENDS = "${{ROS_BUILD_DEPENDS}} ${{ROS_BUILDTOOL_DEPENDS}}"
# Bitbake doesn't support the "export" concept, so build them as if we needed them to build this package (even though we actually
# don't) so that they're guaranteed to have been staged should this package appear in another's DEPENDS.
DEPENDS += "${{ROS_EXPORT_DEPENDS}} ${{ROS_BUILDTOOL_EXPORT_DEPENDS}}"

RDEPENDS:${{PN}} += "${{ROS_EXEC_DEPENDS}}"

# matches with: https://github.com/ros2-gbp/ament_cmake-release/archive/release/humble/ament_cmake/1.3.1-2.tar.gz
ROS_BRANCH ?= "branch=main"
SRC_URI = "git://https://github.com/zff-ros/{data_dict.get('name', 'no name')}-release;${{ROS_BRANCH}};protocol=https"
SRCREV = "b7c43d7da303e96c296aca6bc525b9974ce9a53d"
S = "${{WORKDIR}}/git"

ROS_BUILD_TYPE = "{data_dict.get('export', {}).get('build_type', 'no build_type')}"

inherit ros_${{ROS_BUILD_TYPE}}
    """
    with open(target_path, 'w') as f:
        f.write(template)

if __name__ == "__main__":
    # create_github_repos()
    source_path = '/Users/yikunzhu/wwwroot/zff-tegra-demo-distro-kirkstone/tmpdir/isaac_ros_argus_camera/isaac_ros_argus_camera/package.xml'
    target_path = './test.bb'
    generate_ros_recipe(source_path, target_path)